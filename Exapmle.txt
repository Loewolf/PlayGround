using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class Example : MonoBehaviour
{

    public GameObject player;//сама платформа

    public int speed = 5;
    public int speedRotation = 3;
    public float PI = Mathf.PI;

    //Переменные для опускания/подъема лап
    public bool turnRotation; // стрелой можно крутить - true, нельзя - false. Активируется, когда ковш выходит из пазов
    public bool turnMove; // стрелой можно крутить - true, нельзя - false. Активируется, когда ковш выходит из пазов
    private float maxRotate = 97,
                  minHit4 = -9;
    Quaternion startRotation;
    private GameObject rootRF,
                        stopperRootRF,
                        rootRB,
                        stopperRootRB,
                        rootLF,
                        stopperRootLF,
                        rootLB,
                        stopperRootLB,
                        mainRootOfStrela,
                        nodeStrela1,
                        nodeStrela11,
                        porshenSegment1,
                        cylindrSegment1,
                        porshenSegment1_1,
                        cylindrSegment1_1,
                        nodeStrela2,
                        nodeStrela3,
                        nodeStrela4,
                        porshenSegment4,
                        cylindrSegment4,
                        detailForPorshenSegment4_5,

                        detailForSegment4_2,
                        detailForSegment4_3,
                        detailForSegment4_31,
                        detailForSegment4_4,
                        detailForSegment4_41,
                        porshenSegment2,
                        cylindrSegment2,
                        nodeStrela2_1,
                        object2,
                        my,
                        cylindr11, 
                        porshen11,
                        porshen12,
                        cylindr12;
    Vector3 rotationLegs;
    Quaternion rotationX, rotationY, rotationYforStrela;
    Vector3 rRB, rLF, rLB;
    public int hit,             //для лап
               hit1,            //для первого узла
               hit2,
               hit3,
               hit4,            //для ковша
               hit_main;        //для всей стрелы целиком

    public float z1;
    public float y1;
    public float z;
    public float y;
    public float angl;
    public Vector3 oldPos;
    public Vector3 newPos;
    public float alpha, beta, gamma, phi, psi,
                 alpha_new, beta_new, gamma_new, phi_new, psi_new;
    private float l_35, l_23, l_25, l_34, l_45;
    private float l1, l2, l3, l4;
    public float alpha1, phi1 = 0, psi1 = 0, beta1, gamma1, d1;

    public Vector3 _startPositionMainRootOfStrela;


    // Use this for initialization
    void Start()
    {
        //player = GetComponent<BoxCollider>().gameObject; //(GameObject)this.gameObject;
        player = GameObject.Find("MainGameObject");
        hit = 0;
        hit1 = 0;
        hit2 = 0;
        hit3 = 0;
        hit4 = 0;
        turnRotation = false;
        turnMove = false;
        hit_main = 0;

        rootRF = GameObject.Find("rootRF");
        stopperRootRF = GameObject.Find("stopperRootRF");
        rootRB = GameObject.Find("rootRB");
        stopperRootRB = GameObject.Find("stopperRootRB");
        rootLF = GameObject.Find("rootLF");
        stopperRootLF = GameObject.Find("stopperRootLF");
        rootLB = GameObject.Find("rootLB");
        stopperRootLB = GameObject.Find("stopperRootLB");

        mainRootOfStrela = GameObject.Find("mainRootOfStrela");
        _startPositionMainRootOfStrela = mainRootOfStrela.transform.position;

        nodeStrela1 = GameObject.Find("nodeStrela1");
        nodeStrela11 = GameObject.Find("nodeStrela11");



        nodeStrela2 = GameObject.Find("nodeStrela2");
        nodeStrela3 = GameObject.Find("nodeStrela3");
        nodeStrela4 = GameObject.Find("nodeStrela4");
        porshenSegment1 = GameObject.Find("porshenSegment1");
        cylindrSegment1 = GameObject.Find("cylindrSegment1");
        porshenSegment1_1 = GameObject.Find("porshenSegment1_1");
        cylindrSegment1_1 = GameObject.Find("cylindrSegment1_1");

        porshenSegment4 = GameObject.Find("porshenSegment4");
        cylindrSegment4 = GameObject.Find("cylindrSegment4");
        detailForPorshenSegment4_5 = GameObject.Find("detailForPorshenSegment4_5");

        detailForSegment4_2 = GameObject.Find("detailForSegment4_2");
        detailForSegment4_3 = GameObject.Find("detailForSegment4_3");
        detailForSegment4_31 = GameObject.Find("detailForSegment4_31");
        detailForSegment4_4 = GameObject.Find("detailForSegment4_4");
        detailForSegment4_41 = GameObject.Find("detailForSegment4_41");


        l_23 = lenghtBetweenPoints(detailForSegment4_2, detailForSegment4_3);
        l_25 = lenghtBetweenPoints(detailForSegment4_2, detailForPorshenSegment4_5);
        l_34 = lenghtBetweenPoints(detailForSegment4_31, detailForSegment4_41);
        l_45 = lenghtBetweenPoints(detailForSegment4_41, detailForPorshenSegment4_5);

        porshenSegment2 = GameObject.Find("porshenSegment2");
        cylindrSegment2 = GameObject.Find("cylindrSegment2");
        nodeStrela2_1 = GameObject.Find("nodeStrela2_1");
        object2 = GameObject.Find("object2");
        cylindr11 = GameObject.Find("13");
        cylindr12 = GameObject.Find("29");
        porshen11 = GameObject.Find("27");
        porshen12 = GameObject.Find("30");

        my = GameObject.Find("2");

        float l1y, l1z, h;
        l1y = cylindr11.transform.position.y - my.transform.position.y;
        l1z = cylindr11.transform.position.z - my.transform.position.z;
        l1 = Mathf.Sqrt(l1y * l1y + l1z * l1z);
        l1y = porshen11.transform.position.y - my.transform.position.y;
        l1z = porshen11.transform.position.z - my.transform.position.z;
        d1 = Mathf.Sqrt(l1y * l1y + l1z * l1z);
        l1y = porshen11.transform.position.y - cylindr11.transform.position.y;
        l1z = porshen11.transform.position.z - cylindr11.transform.position.z;
        h = Mathf.Sqrt(l1y * l1y + l1z * l1z);


        alpha1 = Mathf.Acos((l1 * l1 + d1 * d1 - h * h) / (2 * l1 * d1));
        beta1 = Mathf.Asin(d1 * Mathf.Sin(alpha1) / h);
        gamma1 = Mathf.PI - alpha1 - beta1;
    }

    float lenghtBetweenPoints(GameObject a1, GameObject a2)
    {
        return Mathf.Sqrt(Mathf.Pow(a2.transform.position.z - a1.transform.position.z, 2) +
                          Mathf.Pow(a2.transform.position.y - a1.transform.position.y, 2)
                         );
    }


    void ForPorshenFirstSegment(float one)
    {
        alpha_new = alpha1 + 0.5f*one;
        float delta = 0.5f * one;
        nodeStrela1.transform.Rotate(my.transform.right * delta);
        //rotationX = Quaternion.AngleAxis(delta, my.transform.right);
       // nodeStrela1.transform.localRotation *= rotationX;

        beta_new = Mathf.Asin(d1 * Mathf.Sin(alpha_new) / Mathf.Sqrt(d1 * d1 - 2 * d1 * l1 * Mathf.Cos(alpha_new) + l1 * l1));
        delta = beta_new - beta1;
        rotationX = Quaternion.AngleAxis(delta, porshen11.transform.right);
        porshen11.transform.localRotation *= rotationX;

        gamma_new = Mathf.PI - alpha_new - beta_new;
        delta = gamma_new - gamma1;
        rotationX = Quaternion.AngleAxis(delta, cylindr11.transform.right);
        cylindr11.transform.localRotation *= rotationX;

        alpha1 = alpha_new;
        beta1 = beta_new;
        gamma1 = gamma_new;
    }

    void ForPorshenSecondSegment(float one)
    {
        alpha = Mathf.Atan2((porshenSegment2.transform.position.x - nodeStrela2.transform.position.x),
                            (porshenSegment2.transform.position.z - nodeStrela2.transform.position.z));

        beta = Mathf.Atan2((porshenSegment2.transform.position.x - cylindrSegment2.transform.position.x),
                           (porshenSegment2.transform.position.z - cylindrSegment2.transform.position.z));

        alpha *= Mathf.Rad2Deg;
        beta *= Mathf.Rad2Deg;
        gamma = alpha - beta;


        //Поворот nodeStrela1 и porshen на угол дельта
        rotationY = Quaternion.AngleAxis(1 * one, Vector3.up);
        nodeStrela2.transform.localRotation *= rotationY;
        object2.transform.localRotation *= rotationY;

        rotationY = Quaternion.AngleAxis(1 * one, Vector3.down);
        nodeStrela2_1.transform.localRotation *= rotationY;

        //Получение новый координат porshen и пересчет углов 
        alpha_new = Mathf.Atan2((porshenSegment2.transform.position.x - nodeStrela2.transform.position.x),
                                (porshenSegment2.transform.position.z - nodeStrela2.transform.position.z));
        beta_new = Mathf.Atan2((porshenSegment2.transform.position.x - cylindrSegment2.transform.position.x),
                               (porshenSegment2.transform.position.z - cylindrSegment2.transform.position.z));

        alpha_new *= Mathf.Rad2Deg;
        beta_new *= Mathf.Rad2Deg;
        gamma_new = alpha_new - beta_new;

        //Поворот cylindr на разницу бета и нового бета
        rotationX = Quaternion.AngleAxis((beta_new - beta), Vector3.up);
        cylindrSegment2.transform.localRotation *= rotationX;

        Debug.Log(string.Format("GAMMA {0}", gamma_new - gamma));

        //Поворот porshen на разницу бета и нового бета
        rotationX = Quaternion.AngleAxis(-(gamma_new - gamma), Vector3.up);
        porshenSegment2.transform.localRotation *= rotationX;
    }

    void ForPorshenForthSegment(float one)
    {
        l2 = lenghtBetweenPoints(detailForSegment4_2, detailForSegment4_3);
        l1 = lenghtBetweenPoints(detailForSegment4_2, detailForPorshenSegment4_5);
        l3 = lenghtBetweenPoints(detailForSegment4_31, detailForSegment4_4);
        l4 = lenghtBetweenPoints(detailForSegment4_4, detailForPorshenSegment4_5);

        alpha = Mathf.Atan2((porshenSegment4.transform.position.y - detailForPorshenSegment4_5.transform.position.y),
                            (porshenSegment4.transform.position.z - detailForPorshenSegment4_5.transform.position.z));

        beta = Mathf.Atan2((porshenSegment4.transform.position.y - cylindrSegment4.transform.position.y),
                           (porshenSegment4.transform.position.z - cylindrSegment4.transform.position.z));

        alpha *= Mathf.Rad2Deg;
        beta *= Mathf.Rad2Deg;
        gamma = alpha - beta;

        /*****************************   для четырехзвенника   ******************************/

        // 2) определяем l по старым точкам
        float AC = lenghtBetweenPoints(detailForSegment4_4, detailForSegment4_2);

        float phi1 = Mathf.Acos((-l2 * l2 + l3 * l3 + AC * AC) / (2 * l3 * AC));
        float phi2 = Mathf.Acos((-l1 * l1 + l4 * l4 + AC * AC) / (2 * l4 * AC));

        float psi = Mathf.Atan2((detailForSegment4_31.transform.position.y - detailForSegment4_2.transform.position.y),
                           (detailForSegment4_31.transform.position.z - detailForSegment4_2.transform.position.z));


        rotationX = Quaternion.AngleAxis(1 * one, Vector3.right);
        detailForPorshenSegment4_5.transform.localRotation *= rotationX;

        float AC_new = lenghtBetweenPoints(detailForSegment4_4, detailForSegment4_2);

        float phi1_new = Mathf.Acos((-l2 * l2 + l3 * l3 + AC_new * AC_new) / (2 * l3 * AC_new));
        float phi2_new = Mathf.Acos((-l1 * l1 + l4 * l4 + AC_new * AC_new) / (2 * l4 * AC_new));

        Debug.Log(string.Format("AC = {0}, AC_new  = {1}", AC, AC_new));

        float d_phi = (phi1_new + phi2_new) - (phi1 + phi2);
        d_phi *= Mathf.Rad2Deg;
        Debug.Log(string.Format("d_phi = {0}", d_phi));

        rotationX = Quaternion.AngleAxis(-1 * d_phi, Vector3.right);
        detailForSegment4_4.transform.localRotation *= rotationX;


        float dd = lenghtBetweenPoints(detailForSegment4_3, detailForSegment4_31);
        Debug.Log(string.Format("dd = {0}", dd));


        float psi_new = Mathf.Atan2((detailForSegment4_3.transform.position.y - detailForSegment4_2.transform.position.y),
                          (detailForSegment4_3.transform.position.z - detailForSegment4_2.transform.position.z));

        float d_psi = psi_new - psi;
        d_psi *= Mathf.Rad2Deg;
        rotationX = Quaternion.AngleAxis(d_psi, Vector3.right);
        detailForSegment4_2.transform.localRotation *= rotationX;


        /************************************************************************************/

        //Получение новый координат porshen и пересчет углов 
        alpha_new = Mathf.Atan2((porshenSegment4.transform.position.y - detailForPorshenSegment4_5.transform.position.y),
                                (porshenSegment4.transform.position.z - detailForPorshenSegment4_5.transform.position.z)) * Mathf.Rad2Deg;

        beta_new = Mathf.Atan2((porshenSegment4.transform.position.y - cylindrSegment4.transform.position.y),
                               (porshenSegment4.transform.position.z - cylindrSegment4.transform.position.z)) * Mathf.Rad2Deg;

        gamma_new = alpha_new - beta_new;


        //Поворот cylindr на разницу бета и нового бета
        rotationX = Quaternion.AngleAxis(-(beta_new - beta), Vector3.right);
        cylindrSegment4.transform.localRotation *= rotationX;

        //Поворот porshen на разницу бета и нового бета
        rotationX = Quaternion.AngleAxis((gamma_new - gamma), Vector3.right);
        porshenSegment4.transform.localRotation *= rotationX;
    }


    // Update is called once per frame
    void FixedUpdate()
    {

        rotationLegs = rootRF.transform.localRotation.eulerAngles;

        //Move forward
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow))
        {
            if (hit == 0)
            {
                player.transform.position += player.transform.forward * speed * Time.deltaTime;
                //player.transform.position += player.transform.forward * speed * Time.deltaTime;
                //Прибавили позицию вперед (forward) и умножили на скорость (ее переменную) и умножили на кадры в секунду (deltaTime)
            }
        }

        //Move back
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow))
        {
            if (hit == 0)
            {
                player.transform.position -= player.transform.forward * speed * Time.deltaTime;
                //transform.Translate(Vector3.forward * Time.deltaTime * (-speed));
                //player.transform.position -= player.transform.forward * speed * Time.deltaTime;
            }
        }

        //Rotate in left
        if (Input.GetKey(KeyCode.A))
        {
            if (hit == 0)
            {
                //player.transform.Rotate(Vector3.down * speedRotation);
                rotationX = Quaternion.AngleAxis(1, Vector3.down * speedRotation);
                player.transform.rotation *= rotationX;
            }
        }
        //Rotate in right
        if (Input.GetKey(KeyCode.D))
        {
            if (hit == 0)
            {
                //player.transform.Rotate(Vector3.up * speedRotation);
                rotationX = Quaternion.AngleAxis(1, Vector3.up * speedRotation);
                player.transform.rotation *= rotationX;
            }
        }

        //Опускание стопорных лап
        if (Input.GetKey(KeyCode.T))
        {
            if (hit < maxRotate)
            {
                rotationX = Quaternion.AngleAxis(1, new Vector3(1, 0, 0));

                rootRF.transform.localRotation *= rotationX;
                rootLF.transform.localRotation *= rotationX;
                rootRB.transform.localRotation *= rotationX;
                rootLB.transform.localRotation *= rotationX;

                rotationX = Quaternion.AngleAxis(0.24f, new Vector3(-1, 0, 0));
                stopperRootRF.transform.localRotation *= rotationX;
                stopperRootLF.transform.localRotation *= rotationX;
                rotationX = Quaternion.AngleAxis(0.22f, new Vector3(-1, 0, 0));
                stopperRootRB.transform.localRotation *= rotationX;
                stopperRootLB.transform.localRotation *= rotationX;

                hit++;
            }
        }
        //Подъем стопорных лап
        if (Input.GetKey(KeyCode.R))
        {
            if (hit > 0)
            {
                rotationX = Quaternion.AngleAxis(1, new Vector3(-1, 0, 0));

                rootRF.transform.localRotation *= rotationX;
                rootLF.transform.localRotation *= rotationX;
                rootRB.transform.localRotation *= rotationX;
                rootLB.transform.localRotation *= rotationX;

                rotationX = Quaternion.AngleAxis(0.24f, new Vector3(1, 0, 0));
                stopperRootRF.transform.localRotation *= rotationX;
                stopperRootLF.transform.localRotation *= rotationX;
                rotationX = Quaternion.AngleAxis(0.22f, new Vector3(1, 0, 0));
                stopperRootRB.transform.localRotation *= rotationX;
                stopperRootLB.transform.localRotation *= rotationX;

                hit--;
            }
        }
        /////////////////////////////////////////////////////////////////////////////////////////
        //Поворот влево основного узла стрела (всей стрелы целиком)
        if (Input.GetKey(KeyCode.Z))
        {
            if (hit == maxRotate && turnRotation)
            {
                rotationYforStrela = Quaternion.AngleAxis(1, new Vector3(0, -1, 0));
                mainRootOfStrela.transform.localRotation *= rotationYforStrela;
                //mainRootOfStrela.transform.Rotate(0, -1, 0);
                hit_main--;
                if (hit_main == -360 || (hit_main > -360 && hit_main < -359.8))
                {
                    hit_main = 0;
                    mainRootOfStrela.transform.position = _startPositionMainRootOfStrela;
                }
            }
        }

        //Поворот вправо основного узла стрела (всей стрелы целиком)
        if (Input.GetKey(KeyCode.X))
        {
            if (hit == maxRotate && turnRotation)
            {
                rotationYforStrela = Quaternion.AngleAxis(1, new Vector3(0, 1, 0));
                mainRootOfStrela.transform.localRotation *= rotationYforStrela;
                //mainRootOfStrela.transform.Rotate(0, 1, 0);

                hit_main++;
                if (hit_main == 360 || (hit_main > 359.8 && hit_main < 360))
                {
                    hit_main = 0;
                    mainRootOfStrela.transform.position = _startPositionMainRootOfStrela;
                }
            }
        }
        ///////////////////////////////////////////////////////////////////////////////////////////
        //Опускание первого сегмента стрелы
        if (Input.GetKey(KeyCode.Y))
        {
            if (hit == maxRotate && turnRotation)
            {
              //  if (hit1 < 10)
                {
                    ForPorshenFirstSegment(1);
                    hit1++;
                }
            }
        }
        //Подъем первого сегмента стрелы
        if (Input.GetKey(KeyCode.U))
        {
            if (hit == maxRotate && turnRotation)
            {
              //  if (hit1 > -90)
                {
                    //if (hit2 == 0 && hit3 == 0 && hit4 == minHit4 && hit >= -30)
                    // {
                    ForPorshenFirstSegment(-1);
                    hit1--;
                    //}
                    // else if (hit2 != 0 && hit3 != 0 && hit4 == minHit4)
                    //{
                    //     ForPorshenFirstSegment(-1);
                    //     hit1--;
                    //}
                }
            }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////

        //Опускание третьего сегмента стрелы
        if (Input.GetKey(KeyCode.C))
        {
            if (hit == maxRotate && turnRotation)
            {
                rotationX = Quaternion.AngleAxis(1, new Vector3(-1, 0, 0));
                nodeStrela3.transform.localRotation *= rotationX;
                hit3--;
            }
        }

        //Подъем третьего сегмента стрелы
        if (Input.GetKey(KeyCode.V))
        {
            if (hit == maxRotate && turnRotation)
            {
                rotationX = Quaternion.AngleAxis(1, new Vector3(1, 0, 0));
                nodeStrela3.transform.localRotation *= rotationX;
                hit3++;
            }
        }


        //Опускание ковша
        if (Input.GetKey(KeyCode.P))
        {
            if (hit == maxRotate && hit4 <= 27)
            {
                //rotationX = Quaternion.AngleAxis(1, new Vector3(-1, 0, 0));
                //nodeStrela4.transform.localRotation *= rotationX;

                if (hit4 == 0 && hit1 == 0 && hit2 == 0 && hit3 == 0 && turnRotation)
                    turnRotation = false;
                if (turnRotation)
                {
                    ForPorshenForthSegment(1);
                    hit4++;
                }
            }
        }

        //Подъем ковша
        if (Input.GetKey(KeyCode.O))
        {
            if (hit == maxRotate && hit4 >= -111)
            {
                //rotationX = Quaternion.AngleAxis(1, new Vector3(1, 0, 0));
                //nodeStrela4.transform.localRotation *= rotationX;

                if (hit4 == minHit4 && hit1 == 0 && hit2 == 0 && hit3 == 0 && !turnRotation)
                {
                    turnRotation = true;
                    //ForPorshenForthSegment(-1);
                    //hit4--;
                }
                else if (!turnRotation)
                {
                    ForPorshenForthSegment(-1);
                    hit4--;
                };

                /*if (hit4 == minHit4 && turnRotation && (hit1 != 0 || hit2 != 0 || hit3 != 0))
                    turnMove = true;*/
                if (turnMove)
                {
                    ForPorshenForthSegment(-1);
                    hit4--;
                };
            }
        }

        if (hit4 == minHit4 && turnRotation && (hit1 != 0 || hit2 != 0 || hit3 != 0))
            turnMove = true;
        else if (!turnRotation)
            turnMove = false;

        ///////////////////////////////////////////////////////////////////////////////////////////
        //Поворот влево второго сегмента стрелы
        if (Input.GetKey(KeyCode.B))
        {
            if (hit == maxRotate && turnRotation && hit2 <= 10)
            {
                //rotationY = Quaternion.AngleAxis(1, new Vector3(0, 1, 0));
                //nodeStrela2.transform.localRotation *= rotationY;
                ForPorshenSecondSegment(1);
                hit2++;
            }
        }
        //Поворот вправо второго сегмента стрелы
        if (Input.GetKey(KeyCode.N))
        {
            if (hit == maxRotate && turnRotation && hit2 >= -75)
            {
                //rotationY = Quaternion.AngleAxis(1, new Vector3(0, -1, 0));
                //nodeStrela2.transform.localRotation *= rotationY;
                ForPorshenSecondSegment(-1);
                hit2--;
            }
        }

    }



}
